                                                 🛠️ Terraform Key Concepts – Quick Notes

✅ 1. When to Use terraform refresh

When resources have been changed outside of Terraform, and you want the state file to reflect those changes without modifying the configuration files.

terraform refresh
✅ 2. When to Use terraform import

When resources has been created manually (e.g., in AWS, Azure, GCP) or by another tool, and you now want Terraform to manage them.


terraform import <resource_type>.<resource_name> <real_world_resource_id>

terraform import aws_instance.web i-1234567890abcdef0

🌍 What is Terraform?

Terraform is an open-source Infrastructure as Code (IaC) tool.

It helps to create and manage infrastructure using a high-level configuration language called HCL (HashiCorp Configuration Language).

🔧 Terraform Basic Commands

🔹 terraform init

Initializes the environment in the current directory.

Downloads required providers and sets up the backend.

🔹 terraform plan

Shows what changes that terraform will be make.

Helps you review create/update/delete actions before applying.

🔹 terraform apply

Applies the planned changes to real infrastructure.

Creates or updates resources based on .tf files and the plan.

🔌 Terraform Provider vs Resource

🔹 Provider

A plugin that interacts with cloud APIs (AWS, Azure, GCP, etc.) that Tells  to Terraform which platform to work with.

A resource is an actual  component that you want to create, update, or delete in your infrastructure — such as an S3 bucket, Virtual Machine (VM), Virtual Network (VNet/VPC), Storage Account, etc.

🗂️ Workspace

it is Manages multiple state files  within single configuration directory . that allowing to you maintain the separate environments like dev, QA, and prod.

✅ Example:

terraform workspace new dev

📦 Module

A module is a reusable set of Terraform configuration files (like resources, variables, outputs) grouped together to manage a specific piece of infrastructure — like a VPC, VM, or AKS cluster.

🧠 Types of Modules:

Root Module – The main config in your current directory.

Child Module – A reusable module (local or from Terraform Registry).

📄 Terraform State
Is used to track resources managed by Terraform. It stores metadata about the infrastructure

 By default, Terraform keeps the tfstate file locally. To enable team collaboration, store it remotely using Amazon S3 bucket.

🧮 Terraform Variables

Terraform variables are used to parameterize configurations, making them reusable and flexible. They allow defining dynamic 
 values instead of hardcoding them in Terraform files.

variable "region" {
  default = "us-east-1"
}

📤 Terraform Outputs

 Terraform outputs is  a way to display useful information after applying a Terraform configuration files (e.g., IP addresses, DNS names)


output "vm_ip" {
  value = azurerm_public_ip.example.ip_address
}
🔄 Data Sources

Allow you to fetch existing infrastructure from external providers without creating new resources.

✅ Example: Get existing VNet, existing AMI ID, etc.

🧾 Locals

Named values you define in your config to make it cleaner and reusable.


locals {
  instance_type = "t2.micro"
  environment   = "dev"
}

