                                                 🛠️ Terraform Key Concepts – Quick Notes

✅ 1. When to Use terraform refresh

When resources have been changed outside of Terraform, and you want the state file to reflect those changes without modifying the configuration files.

terraform refresh
✅ 2. When to Use terraform import

When resources were created manually (e.g., in AWS, Azure) or by another tool, and you now want Terraform to manage them.


terraform import <resource_type>.<resource_name> <real_world_resource_id>

terraform import aws_instance.web i-1234567890abcdef0

🌍 What is Terraform?

Terraform is an open-source Infrastructure as Code (IaC) tool.

It helps to create and manage infrastructure using a high-level configuration language called HCL (HashiCorp Configuration Language).

🔧 Terraform Basic Commands

🔹 terraform init

Initializes the environment in the current directory.

Downloads required providers and sets up the backend.

🔹 terraform plan

Shows what changes will be made to the infrastructure.

Helps you review create/update/delete actions before applying.

🔹 terraform apply

Applies the planned changes to real infrastructure.

Creates or updates resources based on .tf files and the plan.

🔌 Terraform Provider vs Resource

🔹 Provider

A plugin that interacts with cloud APIs (AWS, Azure, GCP, etc.)

Tells Terraform which platform to work with.

✅ Example:

provider "azurerm" {}  # Talks to Azure API

🔹 Resource

The actual component you create/update/delete in the cloud.

Example: VM, subnet, AKS cluster, S3 bucket, etc.

✅ Example:

resource "azurerm_virtual_machine" "vm1" {
  ...
}

🗂️ Workspace

Manages multiple state files using the same Terraform configuration.

Useful for environments like dev, test, and prod.

✅ Example:

terraform workspace new dev

📦 Module

A reusable block of Terraform code. Helps organize and reuse infrastructure logic.

🧠 Types of Modules:

Root Module – The main config in your current directory.

Child Module – A reusable module (local or from Terraform Registry).

📄 Terraform State
Tracks resources managed by Terraform.

Stores metadata about infrastructure in a file (terraform.tfstate).

✅ By default, state is stored locally.

👉 For team collaboration, store the state remotely (e.g., Amazon S3, Azure Blob).

🧮 Terraform Variables
Variables allow you to parameterize your config instead of hardcoding values.

variable "region" {
  default = "us-east-1"
}

📤 Terraform Outputs

Used to display important info after deployment, like public IP or DNS name.


output "vm_ip" {
  value = azurerm_public_ip.example.ip_address
}
🔄 Data Sources

Allow you to fetch existing infrastructure from external providers without creating new resources.

✅ Example: Get existing VNet, existing AMI ID, etc.

🧾 Locals

Named values you define in your config to make it cleaner and reusable.


locals {
  instance_type = "t2.micro"
  environment   = "dev"
}

